upstream deployer {
  server deployer:5000 fail_timeout=0;
}

server {
  # Redirect all requests to https.
  listen 80;
  server_name _;
  return 301 https://$host$request_uri;
}

proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;

server {
  listen 443;
  server_name _;
  charset utf-8;
  keepalive_timeout 5;

  ssl on;
  ssl_certificate /etc/ssl/certs/test.crt;
  ssl_certificate_key /etc/ssl/private/test.key;

  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:50m;
  ssl_session_tickets off;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;

  add_header Strict-Transport-Security "max-age=31536000";

  # Send the request body immediately as it is received.
  proxy_request_buffering off;
  # Avoid using the buffer in case of chunked transfer encoding.
  proxy_http_version 1.1;

  location / {
    proxy_pass http://deployer;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
    client_max_body_size 100m;
  }
  location ~ (/static|/v1/ui) {
    autoindex off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://deployer;
    proxy_cache STATIC;
    proxy_cache_revalidate on;
    proxy_cache_use_stale  error timeout invalid_header updating
                           http_500 http_502 http_503 http_504;
  }
}
